// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "ObjectBase.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FVector;
#ifdef LIGHTWEIGHTGRIDPLUGIN_GeodesicGrid_generated_h
#error "GeodesicGrid.generated.h already included, missing '#pragma once' in GeodesicGrid.h"
#endif
#define LIGHTWEIGHTGRIDPLUGIN_GeodesicGrid_generated_h

#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_RPC_WRAPPERS \
	virtual TArray<int32> GetIndexNeighbors_Implementation(int32 gridIndex) const; \
	virtual int32 GetLocationIndex_Implementation(FVector const& location) const; \
	virtual FVector GetIndexLocation_Implementation(int32 gridIndex) const; \
	virtual int32 GetNumberOfElements_Implementation() const; \
 \
	DECLARE_FUNCTION(execSetGridRadius) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_newRadius); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->SetGridRadius(Z_Param_newRadius); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetGridRadius) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->GetGridRadius(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetGridFrequency) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_newFrequency); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->SetGridFrequency(Z_Param_newFrequency); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetGridFrequency) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=this->GetGridFrequency(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetIndexNeighbors) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_gridIndex); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(TArray<int32>*)Z_Param__Result=this->GetIndexNeighbors_Implementation(Z_Param_gridIndex); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetLocationIndex) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_location); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=this->GetLocationIndex_Implementation(Z_Param_Out_location); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetIndexLocation) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_gridIndex); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FVector*)Z_Param__Result=this->GetIndexLocation_Implementation(Z_Param_gridIndex); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetNumberOfElements) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=this->GetNumberOfElements_Implementation(); \
		P_NATIVE_END; \
	}


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execSetGridRadius) \
	{ \
		P_GET_PROPERTY(UFloatProperty,Z_Param_newRadius); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->SetGridRadius(Z_Param_newRadius); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetGridRadius) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->GetGridRadius(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execSetGridFrequency) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_newFrequency); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		this->SetGridFrequency(Z_Param_newFrequency); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetGridFrequency) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=this->GetGridFrequency(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetIndexNeighbors) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_gridIndex); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(TArray<int32>*)Z_Param__Result=this->GetIndexNeighbors_Implementation(Z_Param_gridIndex); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetLocationIndex) \
	{ \
		P_GET_STRUCT_REF(FVector,Z_Param_Out_location); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=this->GetLocationIndex_Implementation(Z_Param_Out_location); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetIndexLocation) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_gridIndex); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FVector*)Z_Param__Result=this->GetIndexLocation_Implementation(Z_Param_gridIndex); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGetNumberOfElements) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=this->GetNumberOfElements_Implementation(); \
		P_NATIVE_END; \
	}


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_EVENT_PARMS \
	struct GeodesicGrid_eventGetIndexLocation_Parms \
	{ \
		int32 gridIndex; \
		FVector ReturnValue; \
 \
		/** Constructor, initializes return property only **/ \
		GeodesicGrid_eventGetIndexLocation_Parms() \
			: ReturnValue(ForceInit) \
		{ \
		} \
	}; \
	struct GeodesicGrid_eventGetIndexNeighbors_Parms \
	{ \
		int32 gridIndex; \
		TArray<int32> ReturnValue; \
	}; \
	struct GeodesicGrid_eventGetLocationIndex_Parms \
	{ \
		FVector location; \
		int32 ReturnValue; \
 \
		/** Constructor, initializes return property only **/ \
		GeodesicGrid_eventGetLocationIndex_Parms() \
			: ReturnValue(0) \
		{ \
		} \
	}; \
	struct GeodesicGrid_eventGetNumberOfElements_Parms \
	{ \
		int32 ReturnValue; \
 \
		/** Constructor, initializes return property only **/ \
		GeodesicGrid_eventGetNumberOfElements_Parms() \
			: ReturnValue(0) \
		{ \
		} \
	};


extern LIGHTWEIGHTGRIDPLUGIN_API  FName LIGHTWEIGHTGRIDPLUGIN_GetIndexLocation;
extern LIGHTWEIGHTGRIDPLUGIN_API  FName LIGHTWEIGHTGRIDPLUGIN_GetIndexNeighbors;
extern LIGHTWEIGHTGRIDPLUGIN_API  FName LIGHTWEIGHTGRIDPLUGIN_GetLocationIndex;
extern LIGHTWEIGHTGRIDPLUGIN_API  FName LIGHTWEIGHTGRIDPLUGIN_GetNumberOfElements;
#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_CALLBACK_WRAPPERS
#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesUGeodesicGrid(); \
	friend LIGHTWEIGHTGRIDPLUGIN_API class UClass* Z_Construct_UClass_UGeodesicGrid(); \
	public: \
	DECLARE_CLASS(UGeodesicGrid, USceneComponent, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/LightWeightGridPlugin"), NO_API) \
	DECLARE_SERIALIZER(UGeodesicGrid) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UGeodesicGrid*>(this); }


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_INCLASS \
	private: \
	static void StaticRegisterNativesUGeodesicGrid(); \
	friend LIGHTWEIGHTGRIDPLUGIN_API class UClass* Z_Construct_UClass_UGeodesicGrid(); \
	public: \
	DECLARE_CLASS(UGeodesicGrid, USceneComponent, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/LightWeightGridPlugin"), NO_API) \
	DECLARE_SERIALIZER(UGeodesicGrid) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC}; \
	virtual UObject* _getUObject() const override { return const_cast<UGeodesicGrid*>(this); }


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API UGeodesicGrid(const FObjectInitializer& ObjectInitializer); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(UGeodesicGrid) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UGeodesicGrid); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UGeodesicGrid); \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API UGeodesicGrid(UGeodesicGrid&&); \
	NO_API UGeodesicGrid(const UGeodesicGrid&); \
public:


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_ENHANCED_CONSTRUCTORS \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API UGeodesicGrid(UGeodesicGrid&&); \
	NO_API UGeodesicGrid(const UGeodesicGrid&); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, UGeodesicGrid); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(UGeodesicGrid); \
	DEFINE_DEFAULT_CONSTRUCTOR_CALL(UGeodesicGrid)


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_16_PROLOG \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_EVENT_PARMS


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_RPC_WRAPPERS \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_CALLBACK_WRAPPERS \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_INCLASS \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_RPC_WRAPPERS_NO_PURE_DECLS \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_CALLBACK_WRAPPERS \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_INCLASS_NO_PURE_DECLS \
	GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h_19_ENHANCED_CONSTRUCTORS \
private: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID GridPluginProject_Plugins_LightWeightGridPlugin_Source_LightWeightGridPlugin_Public_GeodesicGrid_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
