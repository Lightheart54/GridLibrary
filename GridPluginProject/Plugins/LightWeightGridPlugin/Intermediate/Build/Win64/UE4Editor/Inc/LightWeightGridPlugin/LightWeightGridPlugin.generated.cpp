// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/LightWeightGridPluginPCH.h"
#include "LightWeightGridPlugin.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1LightWeightGridPlugin() {}
FName LIGHTWEIGHTGRIDPLUGIN_GetIndexLocation = FName(TEXT("GetIndexLocation"));
FName LIGHTWEIGHTGRIDPLUGIN_GetIndexNeighbors = FName(TEXT("GetIndexNeighbors"));
FName LIGHTWEIGHTGRIDPLUGIN_GetLocationIndex = FName(TEXT("GetLocationIndex"));
FName LIGHTWEIGHTGRIDPLUGIN_GetNumberOfElements = FName(TEXT("GetNumberOfElements"));
	FVector ILightWeightGridInterface::GetIndexLocation(int32 gridIndex) const
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_GetIndexLocation instead.");
		LightWeightGridInterface_eventGetIndexLocation_Parms Parms;
		return Parms.ReturnValue;
	}
	TArray<int32> ILightWeightGridInterface::GetIndexNeighbors(int32 gridIndex) const
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_GetIndexNeighbors instead.");
		LightWeightGridInterface_eventGetIndexNeighbors_Parms Parms;
		return Parms.ReturnValue;
	}
	int32 ILightWeightGridInterface::GetLocationIndex(FVector const& location) const
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_GetLocationIndex instead.");
		LightWeightGridInterface_eventGetLocationIndex_Parms Parms;
		return Parms.ReturnValue;
	}
	int32 ILightWeightGridInterface::GetNumberOfElements() const
	{
		check(0 && "Do not directly call Event functions in Interfaces. Call Execute_GetNumberOfElements instead.");
		LightWeightGridInterface_eventGetNumberOfElements_Parms Parms;
		return Parms.ReturnValue;
	}
	void ULightWeightGridInterface::StaticRegisterNativesULightWeightGridInterface()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULightWeightGridInterface::StaticClass(), "GetIndexLocation",(Native)&ILightWeightGridInterface::execGetIndexLocation);
		FNativeFunctionRegistrar::RegisterFunction(ULightWeightGridInterface::StaticClass(), "GetIndexNeighbors",(Native)&ILightWeightGridInterface::execGetIndexNeighbors);
		FNativeFunctionRegistrar::RegisterFunction(ULightWeightGridInterface::StaticClass(), "GetLocationIndex",(Native)&ILightWeightGridInterface::execGetLocationIndex);
		FNativeFunctionRegistrar::RegisterFunction(ULightWeightGridInterface::StaticClass(), "GetNumberOfElements",(Native)&ILightWeightGridInterface::execGetNumberOfElements);
	}
	IMPLEMENT_CLASS(ULightWeightGridInterface, 3870212880);
	FVector ILightWeightGridInterface::Execute_GetIndexLocation(const UObject* O, int32 gridIndex)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULightWeightGridInterface::StaticClass()));
		LightWeightGridInterface_eventGetIndexLocation_Parms Parms;
		UFunction* const Func = O->FindFunction(LIGHTWEIGHTGRIDPLUGIN_GetIndexLocation);
		if (Func)
		{
			Parms.gridIndex=gridIndex;
			const_cast<UObject*>(O)->ProcessEvent(Func, &Parms);
		}
		else if (auto I = (const ILightWeightGridInterface*)(O->GetNativeInterfaceAddress(ULightWeightGridInterface::StaticClass())))
		{
			Parms.ReturnValue = I->GetIndexLocation_Implementation(gridIndex);
		}
		return Parms.ReturnValue;
	}
	TArray<int32> ILightWeightGridInterface::Execute_GetIndexNeighbors(const UObject* O, int32 gridIndex)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULightWeightGridInterface::StaticClass()));
		LightWeightGridInterface_eventGetIndexNeighbors_Parms Parms;
		UFunction* const Func = O->FindFunction(LIGHTWEIGHTGRIDPLUGIN_GetIndexNeighbors);
		if (Func)
		{
			Parms.gridIndex=gridIndex;
			const_cast<UObject*>(O)->ProcessEvent(Func, &Parms);
		}
		else if (auto I = (const ILightWeightGridInterface*)(O->GetNativeInterfaceAddress(ULightWeightGridInterface::StaticClass())))
		{
			Parms.ReturnValue = I->GetIndexNeighbors_Implementation(gridIndex);
		}
		return Parms.ReturnValue;
	}
	int32 ILightWeightGridInterface::Execute_GetLocationIndex(const UObject* O, FVector const& location)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULightWeightGridInterface::StaticClass()));
		LightWeightGridInterface_eventGetLocationIndex_Parms Parms;
		UFunction* const Func = O->FindFunction(LIGHTWEIGHTGRIDPLUGIN_GetLocationIndex);
		if (Func)
		{
			Parms.location=location;
			const_cast<UObject*>(O)->ProcessEvent(Func, &Parms);
		}
		else if (auto I = (const ILightWeightGridInterface*)(O->GetNativeInterfaceAddress(ULightWeightGridInterface::StaticClass())))
		{
			Parms.ReturnValue = I->GetLocationIndex_Implementation(location);
		}
		return Parms.ReturnValue;
	}
	int32 ILightWeightGridInterface::Execute_GetNumberOfElements(const UObject* O)
	{
		check(O != NULL);
		check(O->GetClass()->ImplementsInterface(ULightWeightGridInterface::StaticClass()));
		LightWeightGridInterface_eventGetNumberOfElements_Parms Parms;
		UFunction* const Func = O->FindFunction(LIGHTWEIGHTGRIDPLUGIN_GetNumberOfElements);
		if (Func)
		{
			const_cast<UObject*>(O)->ProcessEvent(Func, &Parms);
		}
		else if (auto I = (const ILightWeightGridInterface*)(O->GetNativeInterfaceAddress(ULightWeightGridInterface::StaticClass())))
		{
			Parms.ReturnValue = I->GetNumberOfElements_Implementation();
		}
		return Parms.ReturnValue;
	}
	FVector UGeodesicGrid::GetIndexLocation(int32 gridIndex) const
	{
		GeodesicGrid_eventGetIndexLocation_Parms Parms;
		Parms.gridIndex=gridIndex;
		const_cast<UGeodesicGrid*>(this)->ProcessEvent(FindFunctionChecked(LIGHTWEIGHTGRIDPLUGIN_GetIndexLocation),&Parms);
		return Parms.ReturnValue;
	}
	TArray<int32> UGeodesicGrid::GetIndexNeighbors(int32 gridIndex) const
	{
		GeodesicGrid_eventGetIndexNeighbors_Parms Parms;
		Parms.gridIndex=gridIndex;
		const_cast<UGeodesicGrid*>(this)->ProcessEvent(FindFunctionChecked(LIGHTWEIGHTGRIDPLUGIN_GetIndexNeighbors),&Parms);
		return Parms.ReturnValue;
	}
	int32 UGeodesicGrid::GetLocationIndex(FVector const& location) const
	{
		GeodesicGrid_eventGetLocationIndex_Parms Parms;
		Parms.location=location;
		const_cast<UGeodesicGrid*>(this)->ProcessEvent(FindFunctionChecked(LIGHTWEIGHTGRIDPLUGIN_GetLocationIndex),&Parms);
		return Parms.ReturnValue;
	}
	int32 UGeodesicGrid::GetNumberOfElements() const
	{
		GeodesicGrid_eventGetNumberOfElements_Parms Parms;
		const_cast<UGeodesicGrid*>(this)->ProcessEvent(FindFunctionChecked(LIGHTWEIGHTGRIDPLUGIN_GetNumberOfElements),&Parms);
		return Parms.ReturnValue;
	}
	void UGeodesicGrid::StaticRegisterNativesUGeodesicGrid()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "GetGridFrequency",(Native)&UGeodesicGrid::execGetGridFrequency);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "GetGridRadius",(Native)&UGeodesicGrid::execGetGridRadius);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "GetIndexLocation",(Native)&UGeodesicGrid::execGetIndexLocation);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "GetIndexNeighbors",(Native)&UGeodesicGrid::execGetIndexNeighbors);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "GetLocationIndex",(Native)&UGeodesicGrid::execGetLocationIndex);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "GetNumberOfElements",(Native)&UGeodesicGrid::execGetNumberOfElements);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "SetGridFrequency",(Native)&UGeodesicGrid::execSetGridFrequency);
		FNativeFunctionRegistrar::RegisterFunction(UGeodesicGrid::StaticClass(), "SetGridRadius",(Native)&UGeodesicGrid::execSetGridRadius);
	}
	IMPLEMENT_CLASS(UGeodesicGrid, 1912697392);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();

	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetIndexLocation();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetIndexNeighbors();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetLocationIndex();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetNumberOfElements();
	LIGHTWEIGHTGRIDPLUGIN_API class UClass* Z_Construct_UClass_ULightWeightGridInterface_NoRegister();
	LIGHTWEIGHTGRIDPLUGIN_API class UClass* Z_Construct_UClass_ULightWeightGridInterface();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_GetGridFrequency();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_GetGridRadius();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_GetIndexLocation();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_GetIndexNeighbors();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_GetLocationIndex();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_GetNumberOfElements();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_SetGridFrequency();
	LIGHTWEIGHTGRIDPLUGIN_API class UFunction* Z_Construct_UFunction_UGeodesicGrid_SetGridRadius();
	LIGHTWEIGHTGRIDPLUGIN_API class UClass* Z_Construct_UClass_UGeodesicGrid_NoRegister();
	LIGHTWEIGHTGRIDPLUGIN_API class UClass* Z_Construct_UClass_UGeodesicGrid();
	LIGHTWEIGHTGRIDPLUGIN_API class UPackage* Z_Construct_UPackage__Script_LightWeightGridPlugin();
	UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetIndexLocation()
	{
		UObject* Outer=Z_Construct_UClass_ULightWeightGridInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIndexLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5C820C00, 65535, sizeof(LightWeightGridInterface_eventGetIndexLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LightWeightGridInterface_eventGetIndexLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_gridIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gridIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(gridIndex, LightWeightGridInterface_eventGetIndexLocation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LightWeightGridInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetIndexNeighbors()
	{
		UObject* Outer=Z_Construct_UClass_ULightWeightGridInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIndexNeighbors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(LightWeightGridInterface_eventGetIndexNeighbors_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, LightWeightGridInterface_eventGetIndexNeighbors_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_gridIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gridIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(gridIndex, LightWeightGridInterface_eventGetIndexNeighbors_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LightWeightGridInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetLocationIndex()
	{
		UObject* Outer=Z_Construct_UClass_ULightWeightGridInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLocationIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5CC20C00, 65535, sizeof(LightWeightGridInterface_eventGetLocationIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, LightWeightGridInterface_eventGetLocationIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(location, LightWeightGridInterface_eventGetLocationIndex_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LightWeightGridInterface.h"));
			MetaData->SetValue(NewProp_location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULightWeightGridInterface_GetNumberOfElements()
	{
		UObject* Outer=Z_Construct_UClass_ULightWeightGridInterface();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumberOfElements"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(LightWeightGridInterface_eventGetNumberOfElements_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, LightWeightGridInterface_eventGetNumberOfElements_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/LightWeightGridInterface.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULightWeightGridInterface_NoRegister()
	{
		return ULightWeightGridInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightWeightGridInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage__Script_LightWeightGridPlugin();
			OuterClass = ULightWeightGridInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20004081;

				OuterClass->LinkChild(Z_Construct_UFunction_ULightWeightGridInterface_GetIndexLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_ULightWeightGridInterface_GetIndexNeighbors());
				OuterClass->LinkChild(Z_Construct_UFunction_ULightWeightGridInterface_GetLocationIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_ULightWeightGridInterface_GetNumberOfElements());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULightWeightGridInterface_GetIndexLocation(), "GetIndexLocation"); // 206771115
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULightWeightGridInterface_GetIndexNeighbors(), "GetIndexNeighbors"); // 3611656810
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULightWeightGridInterface_GetLocationIndex(), "GetLocationIndex"); // 1261747400
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULightWeightGridInterface_GetNumberOfElements(), "GetNumberOfElements"); // 2278001551
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/LightWeightGridInterface.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightWeightGridInterface(Z_Construct_UClass_ULightWeightGridInterface, &ULightWeightGridInterface::StaticClass, TEXT("ULightWeightGridInterface"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightWeightGridInterface);
	UFunction* Z_Construct_UFunction_UGeodesicGrid_GetGridFrequency()
	{
		struct GeodesicGrid_eventGetGridFrequency_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGridFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GeodesicGrid_eventGetGridFrequency_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, GeodesicGrid_eventGetGridFrequency_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the Grid Frequency"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_GetGridRadius()
	{
		struct GeodesicGrid_eventGetGridRadius_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGridRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GeodesicGrid_eventGetGridRadius_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GeodesicGrid_eventGetGridRadius_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the Grid Radius"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_GetIndexLocation()
	{
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIndexLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5C820C00, 65535, sizeof(GeodesicGrid_eventGetIndexLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GeodesicGrid_eventGetIndexLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_gridIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gridIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(gridIndex, GeodesicGrid_eventGetIndexLocation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("See ILightWeightGridInterface::GetIndexLocation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_GetIndexNeighbors()
	{
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIndexNeighbors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(GeodesicGrid_eventGetIndexNeighbors_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, GeodesicGrid_eventGetIndexNeighbors_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_gridIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gridIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(gridIndex, GeodesicGrid_eventGetIndexNeighbors_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("See ILightWeightGridInterface::GetIndexNeighbors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_GetLocationIndex()
	{
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLocationIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5CC20C00, 65535, sizeof(GeodesicGrid_eventGetLocationIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, GeodesicGrid_eventGetLocationIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(location, GeodesicGrid_eventGetLocationIndex_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("See ILightWeightGridInterface::GetLocationIndex"));
			MetaData->SetValue(NewProp_location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_GetNumberOfElements()
	{
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumberOfElements"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x5C020C00, 65535, sizeof(GeodesicGrid_eventGetNumberOfElements_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, GeodesicGrid_eventGetNumberOfElements_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("See ILightWeightGridInterface::GetNumbeOfElements"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_SetGridFrequency()
	{
		struct GeodesicGrid_eventSetGridFrequency_Parms
		{
			int32 newFrequency;
		};
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGridFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GeodesicGrid_eventSetGridFrequency_Parms));
			UProperty* NewProp_newFrequency = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(newFrequency, GeodesicGrid_eventSetGridFrequency_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the Grid Frequency.\n       * This rebuilds the grid. Existing grid vertex numbers are invalidated."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGeodesicGrid_SetGridRadius()
	{
		struct GeodesicGrid_eventSetGridRadius_Parms
		{
			float newRadius;
		};
		UObject* Outer=Z_Construct_UClass_UGeodesicGrid();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGridRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GeodesicGrid_eventSetGridRadius_Parms));
			UProperty* NewProp_newRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(newRadius, GeodesicGrid_eventSetGridRadius_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Grid Properties"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the Grid Radius.\n      * This changes the grid locations. Previously Retrieve Grid Locations are invalidated."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGeodesicGrid_NoRegister()
	{
		return UGeodesicGrid::StaticClass();
	}
	UClass* Z_Construct_UClass_UGeodesicGrid()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_LightWeightGridPlugin();
			OuterClass = UGeodesicGrid::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_GetGridFrequency());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_GetGridRadius());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_GetIndexLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_GetIndexNeighbors());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_GetLocationIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_GetNumberOfElements());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_SetGridFrequency());
				OuterClass->LinkChild(Z_Construct_UFunction_UGeodesicGrid_SetGridRadius());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DebugDisplayDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugDisplayDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DebugDisplayDuration, UGeodesicGrid), 0x0020080000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(displayDebugLines, UGeodesicGrid, bool);
				UProperty* NewProp_displayDebugLines = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("displayDebugLines"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(displayDebugLines, UGeodesicGrid), 0x0020080000000001, CPP_BOOL_PROPERTY_BITMASK(displayDebugLines, UGeodesicGrid), sizeof(bool), true);
				UProperty* NewProp_NumberOfVertexes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfVertexes"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(NumberOfVertexes, UGeodesicGrid), 0x0020080000020001);
				UProperty* NewProp_GridRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GridRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GridRadius, UGeodesicGrid), 0x0020080000000001);
				UProperty* NewProp_GridFrequency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GridFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(GridFrequency, UGeodesicGrid), 0x0020080000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_GetGridFrequency(), "GetGridFrequency"); // 3890473999
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_GetGridRadius(), "GetGridRadius"); // 2657999504
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_GetIndexLocation(), "GetIndexLocation"); // 337337059
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_GetIndexNeighbors(), "GetIndexNeighbors"); // 152684295
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_GetLocationIndex(), "GetLocationIndex"); // 1885302264
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_GetNumberOfElements(), "GetNumberOfElements"); // 1733741557
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_SetGridFrequency(), "SetGridFrequency"); // 1164227598
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGeodesicGrid_SetGridRadius(), "SetGridRadius"); // 4090291581
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_ULightWeightGridInterface_NoRegister(), VTABLE_OFFSET(UGeodesicGrid, ILightWeightGridInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GeodesicGrid.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("* A Geodesic Grid of a Sphere with a specified radius and frequency\n* The grid is based upon the Self-Organizing Map as presented in:\n* Wu, Yingxin and Masahio Takatsuka. \"Spherical self-organizing map using efficient indexed geodesic data structure\"\n*    Elsevier, Neural Networks 19, 2006, 900-910\n* See Documentation for more information concerning the grid structure"));
				MetaData->SetValue(NewProp_DebugDisplayDuration, TEXT("Category"), TEXT("Debug Properties"));
				MetaData->SetValue(NewProp_DebugDisplayDuration, TEXT("ClampMin"), TEXT("0.100000"));
				MetaData->SetValue(NewProp_DebugDisplayDuration, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
				MetaData->SetValue(NewProp_DebugDisplayDuration, TEXT("UIMin"), TEXT("0.100000"));
				MetaData->SetValue(NewProp_displayDebugLines, TEXT("Category"), TEXT("Debug Properties"));
				MetaData->SetValue(NewProp_displayDebugLines, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
				MetaData->SetValue(NewProp_NumberOfVertexes, TEXT("Category"), TEXT("Grid Properties"));
				MetaData->SetValue(NewProp_NumberOfVertexes, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
				MetaData->SetValue(NewProp_NumberOfVertexes, TEXT("ToolTip"), TEXT("The number of Vertexes in the grid"));
				MetaData->SetValue(NewProp_GridRadius, TEXT("Category"), TEXT("Grid Properties"));
				MetaData->SetValue(NewProp_GridRadius, TEXT("ClampMin"), TEXT("0.100000"));
				MetaData->SetValue(NewProp_GridRadius, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
				MetaData->SetValue(NewProp_GridRadius, TEXT("ToolTip"), TEXT("The Radius of the Grid's Circumscribing Sphere"));
				MetaData->SetValue(NewProp_GridRadius, TEXT("UIMin"), TEXT("0.100000"));
				MetaData->SetValue(NewProp_GridFrequency, TEXT("Category"), TEXT("Grid Properties"));
				MetaData->SetValue(NewProp_GridFrequency, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_GridFrequency, TEXT("ModuleRelativePath"), TEXT("Public/GeodesicGrid.h"));
				MetaData->SetValue(NewProp_GridFrequency, TEXT("ToolTip"), TEXT("The Number of Vertexes Between the Base Icosahedron Vertexes"));
				MetaData->SetValue(NewProp_GridFrequency, TEXT("UIMin"), TEXT("1"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGeodesicGrid(Z_Construct_UClass_UGeodesicGrid, &UGeodesicGrid::StaticClass, TEXT("UGeodesicGrid"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGeodesicGrid);
	UPackage* Z_Construct_UPackage__Script_LightWeightGridPlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/LightWeightGridPlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000080);
			FGuid Guid;
			Guid.A = 0x988BBF46;
			Guid.B = 0x3FD677C2;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
